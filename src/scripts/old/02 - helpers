const config={map:{},tile:{},wall:{},floor:{},nav:{},player:{},building:{},object:{},npc:{},skipcheck:{}};
    
//  ████ █████ █████ █████ ███ █    █  ███   ████
// █     █       █     █    █  ██   █ █     █
//  ███  ███     █     █    █  █ █  █ █  ██  ███
//     █ █       █     █    █  █  █ █ █   █     █
// ████  █████   █     █   ███ █   ██  ███  ████
// SECTION: settings
    

// BASIC settings
//  most users should only ever need to change these

    // player movement
    config.nav.diagonal         = false;        // true enables diagonal movement by default

    // default tile def, can also be specified using <<maptile>>
    config.wall.tileid          = ".";          // default map input character for walls
    config.floor.tileid         = "x";


// ADVANCED settings
//  for fancier maps, trickier to work with

    // how much map changes by default when zooming or panning
    config.map.zoom             = 2;            // # tiles view expands or shrinks
    config.map.panx             = 1;            // # tiles panning left or right
    config.map.pany             = 1;            // # tiles panning up or down

    // actors indices and collision checks
    config.player.wall          = true;           // true means others collide into it
    config.building.wall        = true;
    config.object.wall          = false;
    config.npc.wall             = false;


    // checks that entities are always within map boundaries
    config.skipcheck.xybounds   = false;        // true will allow negative coordinates



// IAMBIGBOI settings
//  experimental, expect things to break

    // checks if unused inputs are being given
    config.skipcheck.unused     = false;        // true will suppress & ignore errors

    // identification keywords
    config.wall.tiletype        = "wall";       // used to checked for collisions
    config.floor.tiletype       = "floor";      // assigned to all non-wall tiles by default

    // collsion checks
    config.noclip               = false;        // true turns off all collision checks
    config.collisionerror       = false;        // true will throw an error when collision happens



// GIMMEROPE settings
//  "What map? I'm here to break something." — you

    // guardrails
    config.skipcheck.clobbering = false;        // true allows clobbering maps and entities
    config.skipcheck.common     = false;        // check args against common errors
l
    // global object, setup setup namespace, State namespace
    // can't be set via setup settings
    config.disableglobal        = false;        // true removes the global object
    config.setupname            = '@navmap';    // default, setup['@navmap']
    config.globalname           = 'Navmap';     // default, navmap
    config.Statename            = '@navmap';    // default, State.variables['@navmap']



// ███ █    █ ███ █████
//  █  ██   █  █    █
//  █  █ █  █  █    █
//  █  █  █ █  █    █
// ███ █   ██ ███   █
// SECTION: init

setup[config.setupname] ??= {};
State.variables[config.Statename] ??= {};
State.variables[config.Statename].local ??= {};
State.variables[config.Statename].global ??= {};

//////////////////////////////////////////////////
//////////////////////////////////////////////////
// proxy for setup settings
const def = new Proxy(config, get_controller(setup[config.setupname]));
function get_controller(control) {
    return {
        get(t,p) {
            debug.log('proxy','entered proxy');
            if (typeof control === 'undefined' || typeof control[p] === 'undefined') {
                debug.log('entered undefined');
                return t[p]
            }
            else {
                debug.log('proxy','entered defined');
                if (typeof control[p] === 'object' && ! control[p].isproxy) {
                    debug.log('proxy','created proxy');
                    control[p] = new Proxy(config[p], get_controller(control[p]))
                    control[p].isproxy = true;
                }
                return control[p]
            }
        }
    }
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
// init navmaps, naventities, & navtiles
const navmaps = {};
const naventities = {};
const navtiles = {};
navtiles[String(def.wall.tileid)] = {
    tileid          : String(def.wall.tileid),
    tilename        : def.wall.tileid,
    tiletype        : def.wall.tiletype,
    tilehtml        : def.wall.tileid,
};
navtiles[String(def.floor.tileid)] = {
    tileid          : String(def.floor.tileid),
    tilename        : def.floor.tileid,
    tiletype        : def.floor.tiletype,
    tilehtml        : def.floor.tileid,
};



// █    █  ███  █   █      ████ █      ███   ████  ████ █████  ████
// ██   █ █   █ █   █     █     █     █   █ █     █     █     █
// █ █  █ █████ █   █     █     █     █████  ███   ███  ███    ███
// █  █ █ █   █  █ █      █     █     █   █     █     █ █         █
// █   ██ █   █   █        ████ █████ █   █ ████  ████  █████ ████
// SECTION: nav classes

//////////////////////////////////////////////////
//////////////////////////////////////////////////
// Navmap class object
class Navmap {
    constructor(mapid, inputtype, inputmap, cols) {

        this.error = function(error) { throw new Error(error) };

        // ERROR: clobbering
        if (! def.skipcheck.clobbering && maps[mapid]) {
            return this.error(`Navmap with id "${mapid}" already exists`)
        }

        // create
        navmaps[String(mapid)] = this;
        this.mapid = String(mapid);

        //////////////////////////////////////////////////
        // parse mapinput input into array
        try {
            // macro payload or 1D array
            if (inputtype === 'array') {
                this.arr  = inputmap;
                this.cols = cols;
                // ERROR: missing cols
                if (typeof cols === 'undefined') {
                    return this.error(`Navmap - missing required input "cols" or "columns" for map "${this.mapid}"`)
                }
                // ERROR: map not rectangular
                if (
                    (inputtype === "array") &&
                    (this.arr % this.cols) 
                ) {
                    console.error(inputmap);
                    return this.error(`Navmap - inputmap is not rectangular`)
                }
            }
            // 2D array, grab column # as length of first array
            else if (inputtype === '2D array') {
                this.cols = inputmap[0].length;
                for (const a of inputmap) {
                    // ERROR: non-array input
                    if (! Array.isarray(a)) {
                        console.error(a);
                        return this.error(`Navmap - invalid inputmap, non-array detected for map "${this.mapid}"`);
                    }
                    // ERROR: non-square 2D array
                    if (
                        (a?.length === 0)           || 
                        (a?.length !== this.cols)
                    ) {
                        console.error(a);
                        return this.error(`Navmap - invalid inputmap, non-rectangular input detected for map "${this.mapid}"`)
                    }
                }
                // write array
                this.arr  = inputmap.flat();
            }
            // ERROR: invalid inputtype
            else {
                return this.error(`Navmap - invalid inputtype for map "${this.mapid}", only macro payload or 'array' or '2D array' is supported`)
            }
        }
        catch (error) {
            console.error(`Navmap - failed to parse input for inputtype "${inputtype}" and inputmap (Navmap)`);
            console.error(inputmap);
            return this.error(error);
        }

        // fill in data
        this.mapname        = this.mapid;
        this.rows           = this.arr.length / this.cols;
        this.diagonal       = def.nav.diagonal;
        this.actors         = new Array(this.arr.length);

        //////////////////////////////////////////////////
        // create staple only if non-extant
        for (const t of new Set(this.arr)) {
            navtiles[String(t)] ??= {
                tileid      : String(t),
                tilename    : t,
                tiletype    : def.floor.tiletype,
                tilehtml    : t,
            };
        }
        
        //////////////////////////////////////////////////
        // write to State only if non-extant
        State.variables[config.Statename][this.mapid] ??= {};
        State.variables[config.Statename][this.mapid].arr ??= this.arr;
    }
}

//////////////////////////////////////////////////
// set global
if (! config.disableglobal) {
    Object.defineProperty(window, config.globalname, {
        value: Navmap,
    });
}



// █    █ ███  ████  ████     █   █ █████ █     ████  █████ ████   ████
// ██  ██  █  █     █         █   █ █     █     █   █ █     █   █ █
// █ ██ █  █   ███  █         █████ ███   █     ████  ███   ████   ███
// █    █  █      █ █         █   █ █     █     █     █     █   █     █
// █    █ ███ ████   ████     █   █ █████ █████ █     █████ █   █ ████
// SECTION: misc helpers

//////////////////////////////////////////////////
//////////////////////////////////////////////////
// convert between xy & i
function convert_i2xy(i, mapid) {
    const map = get_map(mapid);
    const { arr, cols } = map;
    if (
        i < 0       ||
        i > arr.length
    ) {
        return {}
    }
    const x = (i % cols) + 1;
    const y = (i - x + 1) / cols + 1;
    return {x, y}
}
function convert_xy2i(xy, mapid) {
    const map = get_map(mapid);
    const { rows, cols } = map;
    const { x, y } = xy;
    if (
        x < 1       || 
        x > rows    ||
        y < 1       ||
        y > cols
    ) {
        return -1
    }
    const i = (y - 1) * cols + x - 1;
    return i
}
function update_box(argObj) {

    // extract from argObj
    const { mapid, displayid, delta } = argObj;
    // extract from map
    const map = get_map(mapid);
    const { rows, cols } = map;
    // extract from box
    const box = get_box(mapid, displayid);
    const x0_old    = box.x0;
    const y0_old    = box.y0;
    const cols_old  = box.cols_view;
    const rows_old  = box.rows_view;

    // calculate new values
    const cols_new  = Math.clamp(
                        1, 
                        cols, 
                        cols_old + (delta.cols ?? 0)
                    );
    const rows_new  = Math.clamp(
                        1, 
                        rows, 
                        rows_old + (delta.rows ?? 0)
                    );
    const x0_new    = Math.clamp(
                        1, 
                        cols - cols_new + 1, 
                        x0_old + Math.floor((cols_old - cols_new) / 2) + (delta.x ?? 0)
                    );
    const y0_new    = Math.clamp(
                        1, 
                        rows - rows_new + 1, 
                        y0_old + Math.floor((rows_old - rows_new) / 2) + (delta.y ?? 0)
                    );

    // write new values
    map.boxes[displayid] = {
        x0          : x0_new,
        y0          : y0_new,
        cols_view   : cols_new,
        rows_view   : rows_new,
    };
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
// retrieve data
function get_map(...args) {
    const mapid = args[0].mapid ?? args[0];
    return navmaps[mapid]
}
function get_tile(...args) {
    const tileid = args[0].tileid ?? args[0];
    return navtiles[tileid]
}
function get_entity(...args) {
    const entityid = args[0].entityid ?? args[0];
    return naventities[entityid]
}
function get_display(...args) {
    const mapid = args[0].mapid ?? args[0];
    const displayid = args[0].displayid ?? args[1];
    const map = get_map(mapid);
    return map.displays[displayid]
}
function get_box(...args) {
    const mapid = args[0].mapid ?? args[0];
    const displayid = args[0].displayid ?? args[1];
    const map = get_map(mapid);
    return map.boxes[displayid]
}
function get_overlap(...args) {
    const mapid = args[0].mapid ?? args[0];
    const entityid = args[0].entityid ?? args[1];
    const map = get_map(mapid);
    const { cols, actors } = map;
    const entity = get_entity(mapid, entityid);
    const { x, y } = entity;
    const i = convert_xy2i({x,y}, mapid);
    return actors[i].overlap.filter( e => e !== entityid );
}
function get_adjacent(...args) {
    const mapid = args[0].mapid ?? args[0];
    const entityid = args[0].entityid ?? args[1];
    const map = get_map(mapid);
    const { cols, actors } = map;
    const entity = get_entity(mapid, entityid);
    const { x, y } = entity;
    const i = convert_xy2i({x,y}, mapid);
    return actors[i].adjacent.filter( e => e !== entityid );
}









// ████  ████  ███ █    █ █████
// █   █ █   █  █  ██   █   █
// ████  ████   █  █ █  █   █
// █     █   █  █  █  █ █   █
// █     █   █ ███ █   ██   █
// SECTION: print elements

//////////////////////////////////////////////////
//////////////////////////////////////////////////
function print_tile(argObj) {
    const { mapid, tile, row, col }= argObj;
    const { tileid, tilename, tiletype, tilehtml } = tile;
    try {
        const $t = $(document.createElement('div'))
        $t
            .addClass(`Navmap-tile`)
            .addClass(tiletype)
            .attr('title', tilename)
            .attr('data-tileid', tileid)
            .attr('data-tilename', tilename)
            .attr('data-tiletype', tiletype)
            .css({
                "grid-column"   : `${col} / span 1`,
                "grid-row"      : `${row} / span 1`,
            })
            .wiki(tilehtml
                    ? tilehtml
                    : tileid            // use id as fallback
            );
        return $t
    }
    //////////////////////////////////////////////////
    catch (error) {
        console.error(`${this.name} - failed to create tile element at "${i}" on "${mapid}" for ${this.name}`);
        console.error(error);
    }
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
function print_entity(argObj) {
    const { mapid, entity, col, row } = argObj;
    const { entityid, entityname, entityhtml } = entity;
    try {
        const $e = $(document.createElement('div'));
        $e
            .addClass(`Navmap-entity`)
            .attr('title', entityname)
            .attr('data-entityid', entityid)
            .wiki(entityhtml       
                    ? entityhtml
                    : entityid          // use name as fallback
            )
            .css({
                "grid-column"   : `${col} / span 1`,
                "grid-row"      : `${row} / span 1`,
            });
        return $e
    }
    //////////////////////////////////////////////////
    catch (error) {
        console.error(`${this.name} - failed to create entity element for "${entityid}" on "${mapid}"`);
        console.error(error);
    }
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
function print_dir(argObj) {
    const { mapid, entityid, dir } = argObj;
    const map = get_map(mapid);
    const { arr, rows, cols, actors } = map;
    const { dirid, dirname, delta } = dir;
    const entity = get_entity(mapid, entityid);
    try {
        const $dir = $(document.createElement('div'));
        $dir
            .addClass(`Navmap-dir`)
            .attr('data-dirid', dirid)
            .attr('data-dirname', dirname)
            .attr('data-mapid', mapid);

        const x = entity.x + delta.x;
        const y = entity.y + delta.y;
        const i = convert_xy2i({x,y}, mapid);

        if (
            (i >= 0)        &&
            (y >= 1)        &&
            (y <= rows)     &&
            (x >= 1)        &&
            (x <= cols)
        ) {
            const tile = get_tile(mapid, arr[i]);
            const { tileid, tilename } = tile;
            const disabled = actors[i].wall.length > 0;
            $dir
                .attr('data-disabled', disabled)
                .attr('data-tileid', tileid)
                .wiki(! disabled
                        ? tilename
                            ? tilename
                            : tileid
                        : '');
        }
        else {
            $dir
                .attr('data-disabled', true)
                .attr('data-tileid', null)
        }

        return $dir
    }
    //////////////////////////////////////////////////
    catch (error) {
        console.error(`${this.name} - failed to create nav direction "${dirname}" for map "${mapid}"`);
        console.error(error);
    }
}



// ████  █████ █████     █   █  ███  █     █   █ █████  ████
// █   █ █     █         █   █ █   █ █     █   █ █     █
// ████  ███   ███       █   █ █████ █     █   █ ███    ███
// █   █ █     █          █ █  █   █ █     █   █ █         █
// █   █ █████ █           █   █   █ █████  ███  █████ ████
// SECTION: ref values / reference values

//////////////////////////////////////////////////
//////////////////////////////////////////////////
const cssunit = {
    exact: ['cm','mm','Q','in','pc','pt','px','em','ex','ch','rem','lh','rlh','vw','vh','vmin','vmax','vb','vi','svw','svh','lvh','dvw','dvh','%'],
    label: "any valid 'CSS unit'",
};
const dirs_4 = {
    C: {
        dirid   : 'C',
        dirname : 'center',
        delta: {
            x  :  0,
            y  :  0,
        },
    },
    N: {
        dirid   : 'N',
        dirname : 'north',
        delta: {
            x  :  0,
            y  : -1,
        },
    },
    E: {
        dirid   : 'E',
        dirname : 'east',
        delta: {
            x  :  1,
            y  :  0,
        },
    },
    S: {
        dirid   : 'S',
        dirname : 'south',
        delta: {
            x  :  0,
            y  :  1,
        },
    },
    W: {
        dirid   : 'W',
        dirname : 'west',
        delta: {
            x  : -1,
            y  :  0,
        },
    },
};
const dirs_8 = {
    ...dirs_4,
    NW: {
        dirid   : 'NW',
        dirname : 'northwest',
        delta: {
            x  : -1,
            y  : -1,
        },
    },
    NE: {
        dirid   : 'NE',
        dirname  : 'northeast',
        delta: {
            x  :  1,
            y  : -1,
        },
    },
    SE: {
        dirid   : 'SE',
        dirname  : 'southeast',
        delta: {
            x  :  1,
            y  :  1,
        },
    },
    SW: {
        dirid   : 'SW',
        dirname : 'southwest',
        delta: {
            x  : -1,
            y  :  1,
        },
    },
};    