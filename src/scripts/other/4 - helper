// validates macro child tags for unique / required
function validate_tags(tags) {
    try {
        for (const tag in tags) {
            // ERROR: missing tag in macro def
            if (! this.self.tags.includes(tag)) {
                throw new Error(`missing tag ${tag} in macro definition for ${this.name}`)
            }
            if (tags[tag].unique) {
                if (this.payload.filter( p => p.name === tag ).length > 1) {
                    return this.error(`${tag} - macro only accepts one ${tag} tag`)
                }
            }
            if (tags[tag].required) {
                if (this.payload.filter( p => p.name === tag ).length === 0) {
                    return this.error(`${this.name} - ${tag} tag is required for macro`)
                }
            }
        }
    }
    catch (error) {
        console.error(`failed to validate macro child tags for ${this.name}`);
        console.error(error);
    }
}
// █   █  ███  █     ███ ████   ███  █████ █████      ███  ████   ███   ████
// █   █ █   █ █      █  █   █ █   █   █   █         █   █ █   █ █     █
// █   █ █████ █      █  █   █ █████   █   ███       █████ ████  █  ██  ███
//  █ █  █   █ █      █  █   █ █   █   █   █         █   █ █   █ █   █     █
//   █   █   █ █████ ███ ████  █   █   █   █████     █   █ █   █  ███  ████
// SECTION: validate args
function validate_args(argObj,template) {
    try {
        const id = template.id;
        delete template.id;
        for (const a in argObj) {
            // if not asked to validate, skip
            if (! template[a].validate) {
                continue;
            }
            if (a === "mapname") {
                const map = Macro.get('newmap').maps[argObj[a]];
                if (! map) {
                    return this.error
                        ? this.error(`${id} - no map with name "${argObj[a]}" found`)
                        : new Error(`${id} - no map with name "${argObj[a]}" found`)
                }
            }
            if (["x","y","width","height"].includes(a)) {
                if (! Number.isInteger(argObj[a])) {
                    return this.error
                        ? this.error(`${id} - ${a} must be an integer`)
                        : new Error(`${id} - ${a} must be an integer`)
                }
            }
        }
    }
    catch (error) {
        console.error(`failed to validate macro arguments for ${this.name}`);
        console.error(error);
    }
}

//  ███  ████   ███       ████  ████      █ █████  ████ █████
// █   █ █   █ █         █    █ █   █     █ █     █       █
// █████ ████  █  ██     █    █ ████      █ ███   █       █
// █   █ █   █ █   █     █    █ █   █ █   █ █     █       █
// █   █ █   █  ███       ████  ████   ███  █████  ████   █
// SECTION: ArgObj parser
// parses macro arguments into an arg object
function ArgObj(args_in,template_in,options) {
    try {

        //////////////////////////////////////////////////
        // ERROR: no args input
        if (! args_in) {
            throw new Error(`ArgObj input missing, arguments`)
        }
        const args      = clone(args_in);
        // ERROR: no template input
        if (! template_in) {
            throw new Error(`ArgObj input missing, template`)
        }
        const template  = clone(template_in);
        // ERROR: template id missing
        const id        = template.id;
        if (! id) {
            throw new Error(`ArgObj template id missing`)
        }
        delete template.id;
        // ERROR: empty template
        const keys      = Object.keys(template);
        if (! keys.length) {
            throw new Error("ArgObj template cannot be empty")
        }
        const alias = {};
        for (const k in template) {
            alias[k] = k;
            if (template[k].alias) {
                if (TypeSet.id(template[k].alias) === "array") {
                    for (const n of template[k].alias) {
                        alias[n] = k;
                    }
                }
                else {
                    alias[template[k].alias] = k;
                }
            }
        }
        console.log(alias);

        //////////////////////////////////////////////////
        const keys_infinite = keys.filter( k => template[k].infinite );
        // ERROR: more than one infinite key
        if (keys_infinite.length > 1) {
            throw new Error("ArgObj template cannot have more than one infinite key")
        }
        // ERROR: infinite key not last
        if (keys_infinite[0] && (keys_infinite[0] !== keys[keys.length - 1])) {
            throw new Error("ArgObj template infinite key must be last")
        }

        //////////////////////////////////////////////////
        // init variables
        const argObj    = {};
        const active    = {
            id          : id,
            args        : args,
            template    : template,
            keys        : keys,
            argObj      : argObj,
            alias       : alias,
            options     : options,
            splice      : 0,
        };
        
        //////////////////////////////////////////////////
        // go through every arg, deleting them as it reads
        while (active.args.length > 0) {
            debug.log('ArgObj',`entered loop`);
            active.splice = 0;
            const arg_this  = active.args[0];
            try {
                // always check infinite first
                if (keys_infinite[0] && argObj[keys_infinite[0]]) {
                    ArgObj_infinite.call(this,active);
                }
                // [[markup]] input
                if (! active.splice && arg_this.isLink) {
                    ArgObj_markup.call(this,active);
                }
                // key value pair input
                if (! active.splice && keys.includes(alias[arg_this])) {
                    ArgObj_kvp.call(this,active);
                }
                // {object} input
                if (! active.splice && (TypeSet.id(arg_this) === 'object')) {
                    ArgObj_obj.call(this,active);
                }
                // lazy matcher, to turn off: options.strict = true
                const { strict } = {strict: false, ...active.options};
                if (! active.splice && ! strict) {
                    ArgObj_lazy.call(this,active);
                }
                // update args
                if (active.splice) {
                    active.args.splice(0,active.splice);
                }
                else {
                    // ERROR: anything after this is mystery
                    return this.error(`${id} - unexpected input "${arg_this}" did not match any valid types`)
                }
            }
            catch (error) {
                console.error(`ArgObj failed at "${arg_this}"`);
                console.error(error);
            }
        }

        //////////////////////////////////////////////////
        // ERROR: missing required key
        const keys_required = keys.filter( k => template[k].required);
        const keys_supplied = Object.keys(argObj);
        for (const k of keys_required) {
            if (! keys_supplied.includes(k)) {
                return this.error(`${id} - missing required key "${k}"`)
            }
        }

        //////////////////////////////////////////////////
        // turn infinite key into array
        if (keys_infinite[0]) {
            if (TypeSet.id(argObj[keys_infinite[0]]) !== "array") {
                argObj[keys_infinite[0]] = [argObj[keys_infinite[0]]];
            }
        }

        //////////////////////////////////////////////////
        // validate args against common errors
        // validate_args.call(this, argObj, {id, ...template});

        return argObj
    }
    catch (error) {
        console.error(`failed to parse macro arguments for "${this.name}"`);
        console.error(error);
    }

}

// ███ █    █ █████ ███ █    █ ███ █████ █████
//  █  ██   █ █      █  ██   █  █    █   █
//  █  █ █  █ ███    █  █ █  █  █    █   ███
//  █  █  █ █ █      █  █  █ █  █    █   █
// ███ █   ██ █     ███ █   ██ ███   █   █████
// SECTION: infinite
function ArgObj_infinite(active) {
    debug.log('ArgObj','entered markup');
    debug.log('ArgObj',active);
    const { id, args, template, keys, argObj, alias, options } = active;
    const arg_this = args[0];
    const k = keys.filter( k => template[k].infinite )[0];
    const typeSet = new TypeSet(template[k].type);
    // ERROR: wrong type for infinite key
    if (! typeSet.accepts(arg_this)) {
        return this.error(`${id} - "${arg_this}" is an invalid type for "${k}", expected ${typeSet.print}`)
    }
    // turn into array
    if (TypeSet.id(argObj[k]) !== "array") {
        argObj[k] = [argObj[k]];
    }
    // already has value, skip
    if (argObj[k].includes(arg_this)) {
        active.splice = 1;
        return active
    }
    // write values
    argObj[k] = TypeSet.id(arg_this) === "array"
                    ? argObj[k].concat(arg_this)
                    : argObj[k].concat([arg_this]);
    active.splice = 1;
    return active
}

// █    █  ███  ████  █   █ █   █ ████
// ██  ██ █   █ █   █ █  █  █   █ █   █
// █ ██ █ █████ ████  ███   █   █ ████
// █    █ █   █ █   █ █  █  █   █ █
// █    █ █   █ █   █ █   █  ███  █
// SECTION: markup
function ArgObj_markup(active) {
    debug.log('ArgObj','entered markup');
    debug.log('ArgObj',active);
    const { id, args, template, keys, argObj, alias, options } = active;
    const arg_this = args[0];
    // ERROR: [[markup]] when no passage input
    if (! keys.includes('passage')) {
        return this.error(`${id} - macro does not accept [[markup]]`)
    }
    // write values
    argObj.linktext = arg_this.text;
    argObj.passage  = arg_this.link;
    active.splice = 1;
    return active
}

// █   █ █   █ ████
// █  █  █   █ █   █
// ███   █   █ ████
// █  █   █ █  █
// █   █   █   █
// SECTION: kvp
function ArgObj_kvp(active) {
    debug.log('ArgObj','entered kvp');
    debug.log('ArgObj',active);
    const { id, args, template, keys, argObj, alias, options } = active;
    const arg_this = args[0];
    const arg_next = args[1];
    const typeSet = new TypeSet(template[alias[arg_this]].type);
    // ERROR: wrong type input
    if (! typeSet.accepts(arg_next)) {
        return this.error(`${id} - "${arg_next}" is an invalid type for "${arg_this}", expected ${typeSet.print}`)
    }
    // write values
    argObj[alias[arg_this]] = arg_next;
    active.splice = 2;
    return active
}

// █      ███  █████ █   █
// █     █   █    █   █ █
// █     █████   █     █
// █     █   █  █      █
// █████ █   █ █████   █
// SECTION: lazy
function ArgObj_lazy(active) {
    debug.log('ArgObj','entered lazy matcher');
    debug.log('ArgObj',active);
    const { id, args, template, keys, argObj, alias, options } = active;
    const arg_this = args[0];
    const keys_left = keys.filter( k => ! Object.keys(argObj).includes(k) );
    // if no unwritten keys, exit
    if (! keys_left.length) {
        return active
    }
    // write to the first key that matches type
    for (const k of keys_left) {
        const typeSet = new TypeSet(template[k].type);
        if (typeSet.accepts(arg_this)) {
            argObj[k] = arg_this;
            active.splice = 1;
            break;
        }
    }
    return active
}

//  ████  ████      █
// █    █ █   █     █
// █    █ ████      █
// █    █ █   █ █   █
//  ████  ████   ███
// SECTION: object
function ArgObj_obj(active) {
    debug.log('ArgObj','entered object parser');
    debug.log('ArgObj',active);
    const { id, args, template, keys, argObj, alias, options } = active;
    const arg_this = args[0];
    for (const a in arg_this) {
        // do something if template has arg_this key
        if (keys.includes(alias[a])) {
            const typeSet = new TypeSet(template[alias[a]].type);
            // ERROR: wrong type input
            if (! typeSet.accepts(arg_this[a])) {
                return this.error(`${id} - "${arg_this[a]}" is an invalid type for "${a}", expected ${typeSet.print}`)
            }
            // write values
            argObj[alias[a]] = arg_this[a];
            active.splice = 1;
        }
    }
    return active
}

